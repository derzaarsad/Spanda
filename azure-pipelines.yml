# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
  branches:
    include:
    - '*'
# specific path build
pr:
  branches:
    include:
    - master
  paths:
    include:
    - '*'
    exclude:
    - README.md
    - .github/*
    - .gitignore
jobs:
- job: DetermineJob
  steps:
    - script: |
        echo "This is job DetermineBuild."
        echo "##vso[task.setvariable variable=jobName;isOutput=true]Serverless" #The variable doThing is set to true
      name: DetermineJobResult

- job: Build_App
  dependsOn: DetermineJob
  condition: eq(dependencies.DetermineJob.outputs['DetermineJobResult.jobName'], 'App')
  pool:
    vmImage: 'macOS-10.14'
  steps:
  - task: NodeTool@0
    inputs:
      versionSpec: '12.x'
    displayName: 'Install Node.js'
  - script: |
      npm install -g nativescript
    displayName: 'install nativescript'
    continueOnError: false
  - bash: |
      echo "y" | $ANDROID_HOME/tools/bin/sdkmanager --install 'system-images;android-28;google_apis;x86'
    displayName: 'install Android image'
  - script: |
      $ANDROID_HOME/emulator/emulator -list-avds
      echo '---'
      echo "no" | $ANDROID_HOME/tools/bin/avdmanager create avd -n test_android_emulator -k 'system-images;android-28;google_apis;x86' --force
      echo '---'
      $ANDROID_HOME/emulator/emulator -list-avds
    displayName: 'create AVD'
  - script: |
      $ANDROID_HOME/platform-tools/adb devices
      echo '---'
      nohup $ANDROID_HOME/emulator/emulator -avd test_android_emulator -no-snapshot > /dev/null 2>&1 & $ANDROID_HOME/platform-tools/adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed | tr -d '\r') ]]; do sleep 1; done; input keyevent 82'
      echo '---'
      $ANDROID_HOME/platform-tools/adb devices
    displayName: 'start Android emulator'
  - script: |
      cd SpandaApp
      tns platform add android
      tns test android --justlaunch
    displayName: 'Run unit test'
    continueOnError: false

- job: Build_Serverless
  dependsOn: DetermineJob
  condition: eq(dependencies.DetermineJob.outputs['DetermineJobResult.jobName'], 'Serverless')
  pool:
    vmImage: 'ubuntu-18.04'
  steps:
  - task: NodeTool@0
    inputs:
      versionSpec: '12.x'
    displayName: 'Install Node.js'
  - script: |
      cd SpandaServerless/spanda
      npm ci
    displayName: 'npm install and build'
    continueOnError: false
  - script: |
      cd SpandaServerless/spanda
      npm test
    displayName: 'Run unit tests'
    continueOnError: true
  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testRunner: JUnit
      testResultsFiles: '$(System.DefaultWorkingDirectory)/SpandaServerless/spanda/test-results.xml'
  - script: |
      curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
      unzip awscli-bundle.zip
      sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
      sh -c "$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh)"
      test -d ~/.linuxbrew && eval $(~/.linuxbrew/bin/brew shellenv)
      test -d /home/linuxbrew/.linuxbrew && eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)
      test -r ~/.bash_profile && echo "eval \$($(brew --prefix)/bin/brew shellenv)" >>~/.bash_profile
      echo "eval \$($(brew --prefix)/bin/brew shellenv)" >>~/.profile
      brew tap aws/tap
      brew install aws-sam-cli
      sam --version
    displayName: 'Installing the AWS SAM CLI'
    continueOnError: false
  - script: |
      cd $(System.DefaultWorkingDirectory)/SpandaServerless
      /home/linuxbrew/.linuxbrew/bin/sam build
    displayName: 'Building Serverless Application Model'
    continueOnError: false
  - publish: $(System.DefaultWorkingDirectory)/SpandaServerless/.aws-sam/build
    artifact: SamApp
